# -- FUNCTIONS -----------------------------------------------------------------

take() {
  mkdir -p $@ && cd ${@:$#}
}

_run_fm() {
  fm
  BUFFER=
  zle accept-line
}

_run_ffd_d() {
  local result
  result="$(ffd --hidden --dir)"
  [[ -d "${result}" ]] &&
    cd "${result}"
  BUFFER=
  zle accept-line
}

run_ffd_d() {
  local result
  result="$(ffd --hidden --dir)"
  [[ -d "${result}" ]] &&
    cd "${result}"
  BUFFER=

}

pullhead() {
  git pull origin "$(git rev-parse --abbrev-ref HEAD)"
}

pushhead() {
  git push origin "$(git rev-parse --abbrev-ref HEAD)" -u
}


# git repository greeter
last_repository=
check_directory_for_new_repository() {
	current_repository=$(git rev-parse --show-toplevel 2> /dev/null)

	if [ "$current_repository" ] && \
	   [ "$current_repository" != "$last_repository" ]; then
		onefetch --no-art
	fi
	last_repository=$current_repository
}
cd() {
	builtin cd "$@"
	check_directory_for_new_repository
}


# Copies the path of given directory or file to the system or X Windows clipboard.
# Copy current directory if no parameter.
function copypath {
  # If no argument passed, use current directory
  local file="${1:-.}"

  # If argument is not an absolute path, prepend $PWD
  [[ $file = /* ]] || file="$PWD/$file"

  # Copy the absolute path without resolving symlinks
  # If clipcopy fails, exit the function with an error
  print -n "${file:a}" | clipcopy || return 1

  echo ${(%):-"%B${file:a}%b copied to clipboard."}
}
